geom_smooth (se = FALSE)
df$debut <- str_sub (df$debut, 1,4)
#filter for after 1960 df %>%
filter (debut > 1960) %>%
ggplot(mapping = aes(x = ab, y = ba))+
geom_point(mapping = aes (color = ab))+
geom_smooth (se = FALSE)
batters %>%
filter(ab > 600) %>%
ggplot (mapping = aes(x = ab, y = ba)) +
geom_point() +
geom_smooth (se = FALSE)
df$debut <- str_sub (df$debut, 1,4)
batters %>%
filter(ab > 600) %>%
ggplot (mapping = aes(x = ab, y = ba)) +
geom_point() +
geom_smooth (se = FALSE)
df$debut <- str_sub(df$debut, 1,4)
#filter for after 1960 df %>%
filter (debut > 1960) %>%
ggplot(mapping = aes(x = ab, y = ba))+
geom_point(mapping = aes (color = ab))+
geom_smooth (se = FALSE)
#filter for after 1960 df %>%
df%>%
filter (debut > 1960) %>%
ggplot(mapping = aes(x = ab, y = ba))+
geom_point(mapping = aes (color = ab))+
geom_smooth (se = FALSE)
library(rsconnect)
library(rsconnect)
rm(list = ls())
data<- diamonds
ui<-fluidPage(
titlePanel(title = "Explore Diamond Dataset"),
fluidRow(
selectInput("x", "Choose X", choices = diamonds),
selectInput("y", "Choose Y", choices = diamonds),
plotOutput("price"),
DT::dataTableOutput("table_01", width = "100%"))
)
library(shiny)
library(ggplot2)
library(tidyverse)
library(shiny)
library(ggplot2)
library(tidyverse)
library(rsconnect)
rm(list = ls())
data<- diamonds
ui<-fluidPage(
titlePanel(title = "Explore Diamond Dataset"),
fluidRow(
selectInput("x", "Choose X", choices = diamonds),
selectInput("y", "Choose Y", choices = diamonds),
plotOutput("price"),
DT::dataTableOutput("table_01", width = "100%"))
)
library(shiny)
library(ggplot2)
library(tidyverse)
library(rsconnect)
rm(list = ls())
data<- diamonds
ui<-fluidPage(
titlePanel(title = "Explore Diamond Dataset"),
fluidRow(
selectInput("x", "Choose X", choices = diamonds),
selectInput("y", "Choose Y", choices = diamonds),
plotOutput("price"),
DT::dataTableOutput("table_01", width = "100%"))
)
library(shiny); runApp('Desktop/DATA/Data 332/ShinnyDiamonds.R')
View(data)
runApp('Desktop/DATA/Data 332/ShinnyDiamonds.R')
runApp('Desktop/DATA/Data 332/ShinnyDiamonds.R')
runApp('Desktop/DATA/Data 332/ShinnyDiamonds.R')
library(shiny); runApp('Desktop/DATA/Data 332/Project2/Shinny2.R')
runApp('Desktop/DATA/Data 332/Project 1/marchmadness2023/Shinny/Shinny2.R')
runApp('Desktop/DATA/Data 332/Project 1/marchmadness2023/Shinny/Shinny2.R')
runApp('Desktop/DATA/Data 332/Project 1/marchmadness2023/Shinny/Shinny2.R')
#Import libraries
library(shiny)
library(ggplot2)
library(tidyverse)
library(rsconnect)
rm(list = ls())
#Read data
data_df <- read.csv("2023_game_data.csv")
column_names<-colnames(data_df) #for input selections
ui <- fluidPage(
# App title ----
titlePanel(title = "March Madness 2023 Dataset"),
fluidRow(
column(2,
selectInput('X', 'Choose Seed',column_names,column_names[2]),
selectInput('Y', 'Choose Kenpom Adjusted Efficiency',column_names,column_names[6]),
selectInput('Z', 'Choose Barttorvik Adjusted Efficiency',column_names,column_names[10]),
selectInput('Splitby', 'Split By', column_names,column_names[3])
),
column(4,plotOutput('plotMarchMadness')),
column(6,DT::dataTableOutput("table_01", width = "100%"))
)
)
server<-function(input,output){
output$plotMarchMadness <- renderPlot({
ggplot(data_df, aes_string(x=input$X, y= input$Y, z= input$Z))+
geom_point()+
geom_smooth()
})
output$table_01<-DT::renderDataTable(data_df[,c(input$X,input$Y,input$Z, input$Splitby)],options = list(pageLength = 4))
}
shinyApp(ui=ui, server=server)
runApp('Desktop/DATA/Data 332/Project 1/marchmadness2023/Shinny/Shinny2.R')
#Import libraries
library(shiny)
library(ggplot2)
library(tidyverse)
library(rsconnect)
rm(list = ls())
#Read data
data_df <- read.csv("2023_game_data.csv")
column_names<-colnames(data_df) #for input selections
ui <- fluidPage(
#---- App title ----
titlePanel(title = "March Madness 2023 Dataset"),
fluidRow(
column(2,
selectInput('X', 'Choose Seed',column_names,column_names[2]),
selectInput('Y', 'Choose Kenpom Adjusted Efficiency',column_names,column_names[6]),
selectInput('Z', 'Choose Barttorvik Adjusted Efficiency',column_names,column_names[10]),
selectInput('Splitby', 'Split By', column_names,column_names[3])
),
column(4,plotOutput('plotMarchMadness')),
column(6,DT::dataTableOutput("table_01", width = "100%"))
)
)
server<-function(input,output){
output$plotMarchMadness <- renderPlot({
ggplot(data_df, aes_string(x=input$X, y= input$Y, z= input$Z))+
geom_point()+
geom_smooth()
})
output$table_01<-DT::renderDataTable(data_df[,c(input$X,input$Y,input$Z, input$Splitby)],options = list(pageLength = 4))
}
shinyApp(ui=ui, server=server)
#Import libraries
library(shiny)
library(ggplot2)
library(tidyverse)
library(rsconnect)
rm(list = ls())
#Read data
data_df <- read.csv("2023_game_data.csv")
#Import libraries
library(shiny)
library(ggplot2)
library(tidyverse)
library(rsconnect)
rm(list = ls())
#Read data
data_df <- read.csv("2023_game_data.csv")
column_names<-colnames(data_df) #for input selections
ui <- fluidPage(
#---- App title ----
titlePanel(title = "March Madness 2023 Dataset"),
fluidRow(
column(2,
selectInput('X', 'Choose Seed',column_names,column_names[2]),
selectInput('Y', 'Choose Kenpom Adjusted Efficiency',column_names,column_names[6]),
selectInput('Z', 'Choose Barttorvik Adjusted Efficiency',column_names,column_names[10]),
selectInput('Splitby', 'Split By', column_names,column_names[3])
),
column(4,plotOutput('plotMarchMadness')),
column(6,DT::dataTableOutput("table_01", width = "100%"))
)
)
server<-function(input,output){
output$plotMarchMadness <- renderPlot({
ggplot(data_df, aes_string(x=input$X, y= input$Y, z= input$Z))+
geom_point()+
geom_smooth()
})
output$table_01<-DT::renderDataTable(data_df[,c(input$X,input$Y,input$Z, input$Splitby)],options = list(pageLength = 4))
}
shinyApp(ui=ui, server=server)
#Import libraries
library(shiny)
library(ggplot2)
library(tidyverse)
library(rsconnect)
rm(list = ls())
#Read data
data_df <- read.csv("2023_game_data.csv")
#Import libraries
library(shiny)
library(ggplot2)
library(tidyverse)
library(rsconnect)
rm(list = ls())
#Read data
data_df <- read.csv("2023_game_data.csv")
column_names<-colnames(data_df) #for input selections
ui <- fluidPage(
#---- App title ----
titlePanel(title = "March Madness 2023 Dataset"),
fluidRow(
column(2,
selectInput('X', 'Choose Seed',column_names,column_names[2]),
selectInput('Y', 'Choose Kenpom Adjusted Efficiency',column_names,column_names[6]),
selectInput('Z', 'Choose Barttorvik Adjusted Efficiency',column_names,column_names[10]),
selectInput('Splitby', 'Split By', column_names,column_names[3])
),
column(4,plotOutput('plotMarchMadness')),
column(6,DT::dataTableOutput("table_01", width = "100%"))
)
)
server<-function(input,output){
output$plotMarchMadness <- renderPlot({
ggplot(data_df, aes_string(x=input$X, y= input$Y, z= input$Z))+
geom_point()+
geom_smooth()
})
output$table_01<-DT::renderDataTable(data_df[,c(input$X,input$Y,input$Z, input$Splitby)],options = list(pageLength = 4))
}
shinyApp(ui=ui, server=server)
#Import libraries
library(shiny)
library(ggplot2)
#Import libraries
library(shiny)
library(ggplot2)
library(tidyverse)
library(rsconnect)
rm(list = ls())
#Read data
data_df <- read.csv("2023_game_data.csv")
#Import libraries
library(shiny)
library(ggplot2)
library(tidyverse)
library(rsconnect)
rm(list = ls())
#Read data
data_df <- read.csv("2023_game_data.csv")
#Import libraries
library(shiny)
library(ggplot2)
library(tidyverse)
library(rsconnect)
rm(list = ls())
#Read data
data_df <- read.csv("2023_game_data.csv")
server<-function(input,output){
output$plotMarchMadness <- renderPlot({
ggplot(data_df, aes_string(x=input$X, y= input$Y, z= input$Z))+
geom_point()+
geom_smooth()
})
output$table_01<-DT::renderDataTable(data_df[,c(input$X,input$Y,input$Z, input$Splitby)],options = list(pageLength = 4))
}
shinyApp(ui=ui, server=server)
#Import libraries
library(shiny)
library(ggplot2)
library(tidyverse)
library(rsconnect)
rm(list = ls())
#Read data
data_df <- read.csv("2023_game_data.csv")
#Import libraries
library(shiny)
library(ggplot2)
library(tidyverse)
library(rsconnect)
rm(list = ls())
#Read data
data_df <- read.csv("2023_game_data.csv")
#Import libraries
library(shiny)
library(ggplot2)
library(tidyverse)
library(rsconnect)
rm(list = ls())
#Read data
data_df <- read.csv("2023_game_data.csv")
column_names<-colnames(data_df) #for input selections
library(dplyr)
library(tidyverse)
library(readxl)
library(tidyr)
library(lubridate)
library(shiny)
library(ggplot2)
library(scales)
library(dplyr)
library(tidyverse)
library(readxl)
library(tidyr)
library(lubridate)
library(shiny)
library(ggplot2)
library(scales)
rm(list=ls())
setwd("~/Desktop/DATA/Data 332/Project 3")
April_table <- read.csv('uber-raw-data-apr14.csv') #read april excel
May_table <- read.csv('uber-raw-data-may14.csv') #read may excel
June_table <- read.csv('uber-raw-data-jun14.csv') #read june excel
July_table <- read.csv('uber-raw-data-jul14.csv') #read july excel
August_table <- read.csv('uber-raw-data-aug14.csv') #read august excel
Sept_table <- read.csv('uber-raw-data-sep14.csv') #read september excel
combined_table <-rbind(April_table, May_table, June_table, July_table, August_table,Sept_table)%>% #Binding all months data
rename(Date_Time = Date.Time) #rename date so that date and time could be seperated
#formatting date
combined_table$Date <- as.POSIXct(paste(combined_table$Date_Time), format = "%m/%d/%Y")
#convert time in 24 hour format
combined_table$Time<- format (as.POSIXct(strptime(combined_table$Date_Time,"%m/%d/%Y %H:%M:%S")), format = "%H:%M:%S")
#seperated day, date, month and year
combined_table$Day <- factor(day(combined_table$Date))
combined_table$Month <- factor(month(combined_table$Date, label = TRUE))
combined_table$Year <- factor(year(combined_table$Date))
combined_table$dayofweek <- factor(wday(combined_table$Date, label = TRUE))
#seperated hour, minutes and seconds
combined_table$Hour <- factor(hour(hms(combined_table$Time)))
combined_table$Minute <- factor(minute(hms(combined_table$Time)))
combined_table$Second <- factor(second(hms(combined_table$Time)))
setwd("~/Desktop/DATA/Data 332/UberProject")
library(dplyr)
library(tidyverse)
library(readxl)
library(tidyr)
library(lubridate)
library(shiny)
library(ggplot2)
library(scales)
rm(list=ls())
setwd("~/Desktop/DATA/Data 332/UberProject")
library(dplyr)
library(tidyverse)
library(readxl)
library(tidyr)
library(lubridate)
library(shiny)
library(ggplot2)
library(scales)
rm(list=ls())
setwd("~/Desktop/DATA/Data 332/UberProject")
April_table <- read.csv('uber-raw-data-apr14.csv') #read april excel
May_table <- read.csv('uber-raw-data-may14.csv') #read may excel
June_table <- read.csv('uber-raw-data-jun14.csv') #read june excel
July_table <- read.csv('uber-raw-data-jul14.csv') #read july excel
library(dplyr)
library(tidyverse)
library(readxl)
library(tidyr)
library(lubridate)
library(shiny)
library(ggplot2)
library(scales)
rm(list=ls())
setwd("~/Desktop/DATA/Data 332/UberProject")
April_table <- read.csv('uber-raw-data-apr14.csv') #read april excel
library(dplyr)
library(tidyverse)
library(readxl)
library(tidyr)
library(lubridate)
library(shiny)
library(ggplot2)
library(scales)
rm(list=ls())
setwd("~/Desktop/DATA/Data 332/UberProject")
April_table <- read.csv('uber-raw-data-apr14.csv') #read april excel
April_table <- read.csv('uber-raw-data-apr14.csv') #read april excel
library(dplyr)
library(tidyverse)
library(readxl)
library(tidyr)
library(lubridate)
library(shiny)
library(ggplot2)
library(scales)
rm(list=ls())
setwd("~/Desktop/DATA/Data 332/UberProject")
April_table <- read.csv('uber-raw-data-apr14.csv') #read april excel
setwd("~/Desktop/DATA/Data 332/UberProject/Files for Analysis")
library(dplyr)
library(tidyverse)
library(readxl)
library(tidyr)
library(lubridate)
library(shiny)
library(ggplot2)
library(scales)
rm(list=ls())
setwd("~/Desktop/DATA/Data 332/UberProject/Files for Analysis")
April_table <- read.csv('uber-raw-data-apr14.csv') #read april excel
May_table <- read.csv('uber-raw-data-may14.csv') #read may excel
June_table <- read.csv('uber-raw-data-jun14.csv') #read june excel
July_table <- read.csv('uber-raw-data-jul14.csv') #read july excel
August_table <- read.csv('uber-raw-data-aug14.csv') #read august excel
Sept_table <- read.csv('uber-raw-data-sep14.csv') #read september excel
combined_table <-rbind(April_table, May_table, June_table, July_table, August_table,Sept_table)%>% #Binding all months data
rename(Date_Time = Date.Time) #rename date so that date and time could be seperated
#formatting date
combined_table$Date <- as.POSIXct(paste(combined_table$Date_Time), format = "%m/%d/%Y")
#convert time in 24 hour format
combined_table$Time<- format (as.POSIXct(strptime(combined_table$Date_Time,"%m/%d/%Y %H:%M:%S")), format = "%H:%M:%S")
#seperated day, date, month and year
combined_table$Day <- factor(day(combined_table$Date))
combined_table$Month <- factor(month(combined_table$Date, label = TRUE))
combined_table$Year <- factor(year(combined_table$Date))
combined_table$dayofweek <- factor(wday(combined_table$Date, label = TRUE))
#seperated hour, minutes and seconds
combined_table$Hour <- factor(hour(hms(combined_table$Time)))
combined_table$Minute <- factor(minute(hms(combined_table$Time)))
combined_table$Second <- factor(second(hms(combined_table$Time)))
#stacked and grouped graphs when asking for months
#1. Pivot table to show Trips by the hour
trip_hour <- combined_table%>%
group_by(Hour)%>%
dplyr::summarise(Total=n())
# 3. Graph representation of Trips Every Hour
ggplot(trip_hour,aes(Hour,Total))+
geom_bar(stat = "identity",fill="pink",color="gray")+
ggtitle("Trips by the Hour")+
theme(legend.position = "none",plot.title = element_text(hjust = 0.5))+
scale_y_continuous(labels=comma)+xlab("Hour")+ylab("Total Trips")
install.packages("writexl")
library(writexl)
#1. Pivot table to show Trips by the hour
trip_hour <- combined_table%>%
group_by(Hour)%>%
dplyr::summarise(Total=n())
write_xlsx(trip_hour, path="~/Desktop/DATA/Data 332/UberProject/Files for Analysis/trip_per_hour.xlsx")
#10. Heat map by month and week
ggplot(trip_dayofweek_Month, aes(Month, dayofweek, fill= Total))+
geom_tile(color="white")+
scale_fill_gradient(low="palegreen", high="seagreen4")+
ggtitle("Heat Map by Month and Week")
View(trip_hour)
#2. Trips by Hour and Month
trip_hour_month<- combined_table%>%
group_by(Month, Hour)%>%
dplyr::summarise(Total=n())
write_xlsx(trip_hour_month,path = "~/Desktop/DATA/Data 332/UberProject/Files for Shinny/trip_by_hour_month.xlsx")
#3. Table of trips taken during every day of the month
trip_dayofweek_Month <- combined_table%>%
group_by(Day)%>%
dplyr::summarise(Total=n())
write_xlsx(trip_dayofweek_Month,path = "~/Desktop/DATA/Data 332/UberProject/Files for Shinny/trip_by_dayofWeek_month.xlsx")
#4. Trips by month
trip_month <- combined_table%>%
group_by(Month)%>%
dplyr::summarise(Total=n())
write_xlsx(trip_month,path = "~/Desktop/DATA/Data 332/UberProject/Files for Shinny/trip_by_month.xlsx")
#5. Trips by Day and Month
trip_dayofweek_Month <- combined_table%>%
group_by(dayofweek, Month)%>%
dplyr::summarise(Total=n())
write_xlsx(trip_dayofweek_Month,path = "~/Desktop/DATA/Data 332/UberProject/Files for Shinny/trip_by_dayofWeek_Month.xlsx")
#7. Trips by Bases and Month
trip_base_month <- combined_table%>%
group_by(Base, Month)%>%
dplyr::summarise(Total=n())
write_xlsx(trip_base_month,path = "~/Desktop/DATA/Data 332/UberProject/Files for Shinny/trip_by_base_month.xlsx")
#8. Trips by day and hour
trip_day_hour <- combined_table %>%
group_by(Day, Hour) %>%
dplyr::summarize(Total = n())
write_xlsx(trip_day_hour,path = "~/Desktop/DATA/Data 332/UberProject/Files for Shinny/trip_by_day_hour.xlsx")
#1. Pivot table to show Trips by the hour
trip_hour <- combined_table%>%
group_by(Hour)%>%
dplyr::summarise(Total=n())
write_xlsx(trip_hour, path="~/Desktop/DATA/Data 332/UberProject/Files for Shinny/trip_per_hour.xlsx")
#2. Trips by Hour and Month
trip_hour_month<- combined_table%>%
group_by(Month, Hour)%>%
dplyr::summarise(Total=n())
write_xlsx(trip_hour_month,path = "~/Desktop/DATA/Data 332/UberProject/Files for Shinny/trip_by_hour_month.xlsx")
#3. Table of trips taken during every day of the month
trip_dayofweek_Month <- combined_table%>%
group_by(Day)%>%
dplyr::summarise(Total=n())
write_xlsx(trip_dayofweek_Month,path = "~/Desktop/DATA/Data 332/UberProject/Files for Shinny/trip_by_dayofWeek_month.xlsx")
#4. Trips by month
trip_month <- combined_table%>%
group_by(Month)%>%
dplyr::summarise(Total=n())
write_xlsx(trip_month,path = "~/Desktop/DATA/Data 332/UberProject/Files for Shinny/trip_by_month.xlsx")
#7. Trips by Bases and Month
trip_base_month <- combined_table%>%
group_by(Base, Month)%>%
dplyr::summarise(Total=n())
write_xlsx(trip_base_month,path = "~/Desktop/DATA/Data 332/UberProject/Files for Shinny/trip_by_base_month.xlsx")
#8. Trips by day and hour
trip_day_hour <- combined_table %>%
group_by(Day, Hour) %>%
dplyr::summarize(Total = n())
write_xlsx(trip_day_hour,path = "~/Desktop/DATA/Data 332/UberProject/Files for Shinny/trip_by_day_hour.xlsx")
#7. Trips by month and day
trip_month_day <- combined_table %>%
group_by(Month, Day) %>%
dplyr::summarize(Total = n())
write_xlsx(trip_month_day,path = "~/Desktop/DATA/Data 332/UberProject/Files for Shinny/trip_by_month_day.xlsx")
#8. Trips by Bases and Day of Week
trip_base_day <- combined_table %>%
group_by(Base, dayofweek) %>%
dplyr::summarize(Total = n())
write_xlsx(trip_base_day,path = "~/Desktop/DATA/Data 332/UberProject/Files for Shinny/trip_by_base_day.xlsx")
