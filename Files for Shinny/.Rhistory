people <- as_tibble(Lahman::People)
batters <- batting %>%
group_by(playerID) %>%
summarize (
ba - sum(H, na.rm = TRUE) / sum(AB, na.rm = TRUE), #ba = Batting average
ab = sum(AB, na.rm = TRUE) ) #ab = at bats
library(dplyr)
library(tidyverse)
library(Lahman)
library(ggplot2)
# Convert to a tibble so it prints nicely
batting <- as_tibble(Lahman:: Batting)
people <- as_tibble(Lahman::People)
batters <- batting %>%
group_by(playerID) %>%
summarize (
ba - sum(H, na.rm = TRUE) / sum(AB, na.rm = TRUE), #ba = Batting average
ab = sum(AB, na.rm = TRUE) ) #ab = at bats
library(dplyr)
library(tidyverse)
library(Lahman)
library(ggplot2)
# Convert to a tibble so it prints nicely
batting <- as_tibble(Lahman:: Batting)
people <- as_tibble(Lahman::People)
batters <- batting %>%
group_by(playerID) %>%
summarize (
ba - sum(H, na.rm = TRUE) / sum(AB, na.rm = TRUE), #ba = Batting average
ab = sum(AB, na.rm = TRUE) ) #ab = at bats
batters <- batting %>%
group_by(playerID) %>%
summarize (
ba = sum(H, na.rm = TRUE) / sum(AB, na.rm = TRUE), #ba = Batting average
ab = sum(AB, na.rm = TRUE)
) #ab = at bats
df_people <- people %>%
dplyr::filter (nameLast == 'Trout')
df <- batters %>%
left_join(people, by=c('playerID'))
batters %>%
filter(ab > 600) %%
ggplot (mapping = aes(x = ab, y = ba)) +
geom_point() +
geom_smooth (se = FALSE)
df$debut <- str_sub (df$debut, 1,4)
#filter for after 1960 df %>%
filter (debut > 1960) %>%
ggplot(mapping = aes(x = ab, y = ba))+
geom_point(mapping = aes (color = ab))+
geom_smooth (se = FALSE)
batters %>%
filter(ab > 600) %>%
ggplot (mapping = aes(x = ab, y = ba)) +
geom_point() +
geom_smooth (se = FALSE)
df$debut <- str_sub (df$debut, 1,4)
batters %>%
filter(ab > 600) %>%
ggplot (mapping = aes(x = ab, y = ba)) +
geom_point() +
geom_smooth (se = FALSE)
df$debut <- str_sub(df$debut, 1,4)
#filter for after 1960 df %>%
filter (debut > 1960) %>%
ggplot(mapping = aes(x = ab, y = ba))+
geom_point(mapping = aes (color = ab))+
geom_smooth (se = FALSE)
#filter for after 1960 df %>%
df%>%
filter (debut > 1960) %>%
ggplot(mapping = aes(x = ab, y = ba))+
geom_point(mapping = aes (color = ab))+
geom_smooth (se = FALSE)
library(rsconnect)
library(rsconnect)
rm(list = ls())
data<- diamonds
ui<-fluidPage(
titlePanel(title = "Explore Diamond Dataset"),
fluidRow(
selectInput("x", "Choose X", choices = diamonds),
selectInput("y", "Choose Y", choices = diamonds),
plotOutput("price"),
DT::dataTableOutput("table_01", width = "100%"))
)
library(shiny)
library(ggplot2)
library(tidyverse)
library(shiny)
library(ggplot2)
library(tidyverse)
library(rsconnect)
rm(list = ls())
data<- diamonds
ui<-fluidPage(
titlePanel(title = "Explore Diamond Dataset"),
fluidRow(
selectInput("x", "Choose X", choices = diamonds),
selectInput("y", "Choose Y", choices = diamonds),
plotOutput("price"),
DT::dataTableOutput("table_01", width = "100%"))
)
library(shiny)
library(ggplot2)
library(tidyverse)
library(rsconnect)
rm(list = ls())
data<- diamonds
ui<-fluidPage(
titlePanel(title = "Explore Diamond Dataset"),
fluidRow(
selectInput("x", "Choose X", choices = diamonds),
selectInput("y", "Choose Y", choices = diamonds),
plotOutput("price"),
DT::dataTableOutput("table_01", width = "100%"))
)
library(shiny); runApp('Desktop/DATA/Data 332/ShinnyDiamonds.R')
View(data)
runApp('Desktop/DATA/Data 332/ShinnyDiamonds.R')
runApp('Desktop/DATA/Data 332/ShinnyDiamonds.R')
runApp('Desktop/DATA/Data 332/ShinnyDiamonds.R')
library(shiny); runApp('Desktop/DATA/Data 332/Project2/Shinny2.R')
runApp('Desktop/DATA/Data 332/Project 1/marchmadness2023/Shinny/Shinny2.R')
runApp('Desktop/DATA/Data 332/Project 1/marchmadness2023/Shinny/Shinny2.R')
runApp('Desktop/DATA/Data 332/Project 1/marchmadness2023/Shinny/Shinny2.R')
#Import libraries
library(shiny)
library(ggplot2)
library(tidyverse)
library(rsconnect)
rm(list = ls())
#Read data
data_df <- read.csv("2023_game_data.csv")
column_names<-colnames(data_df) #for input selections
ui <- fluidPage(
# App title ----
titlePanel(title = "March Madness 2023 Dataset"),
fluidRow(
column(2,
selectInput('X', 'Choose Seed',column_names,column_names[2]),
selectInput('Y', 'Choose Kenpom Adjusted Efficiency',column_names,column_names[6]),
selectInput('Z', 'Choose Barttorvik Adjusted Efficiency',column_names,column_names[10]),
selectInput('Splitby', 'Split By', column_names,column_names[3])
),
column(4,plotOutput('plotMarchMadness')),
column(6,DT::dataTableOutput("table_01", width = "100%"))
)
)
server<-function(input,output){
output$plotMarchMadness <- renderPlot({
ggplot(data_df, aes_string(x=input$X, y= input$Y, z= input$Z))+
geom_point()+
geom_smooth()
})
output$table_01<-DT::renderDataTable(data_df[,c(input$X,input$Y,input$Z, input$Splitby)],options = list(pageLength = 4))
}
shinyApp(ui=ui, server=server)
runApp('Desktop/DATA/Data 332/Project 1/marchmadness2023/Shinny/Shinny2.R')
#Import libraries
library(shiny)
library(ggplot2)
library(tidyverse)
library(rsconnect)
rm(list = ls())
#Read data
data_df <- read.csv("2023_game_data.csv")
column_names<-colnames(data_df) #for input selections
ui <- fluidPage(
#---- App title ----
titlePanel(title = "March Madness 2023 Dataset"),
fluidRow(
column(2,
selectInput('X', 'Choose Seed',column_names,column_names[2]),
selectInput('Y', 'Choose Kenpom Adjusted Efficiency',column_names,column_names[6]),
selectInput('Z', 'Choose Barttorvik Adjusted Efficiency',column_names,column_names[10]),
selectInput('Splitby', 'Split By', column_names,column_names[3])
),
column(4,plotOutput('plotMarchMadness')),
column(6,DT::dataTableOutput("table_01", width = "100%"))
)
)
server<-function(input,output){
output$plotMarchMadness <- renderPlot({
ggplot(data_df, aes_string(x=input$X, y= input$Y, z= input$Z))+
geom_point()+
geom_smooth()
})
output$table_01<-DT::renderDataTable(data_df[,c(input$X,input$Y,input$Z, input$Splitby)],options = list(pageLength = 4))
}
shinyApp(ui=ui, server=server)
#Import libraries
library(shiny)
library(ggplot2)
library(tidyverse)
library(rsconnect)
rm(list = ls())
#Read data
data_df <- read.csv("2023_game_data.csv")
#Import libraries
library(shiny)
library(ggplot2)
library(tidyverse)
library(rsconnect)
rm(list = ls())
#Read data
data_df <- read.csv("2023_game_data.csv")
column_names<-colnames(data_df) #for input selections
ui <- fluidPage(
#---- App title ----
titlePanel(title = "March Madness 2023 Dataset"),
fluidRow(
column(2,
selectInput('X', 'Choose Seed',column_names,column_names[2]),
selectInput('Y', 'Choose Kenpom Adjusted Efficiency',column_names,column_names[6]),
selectInput('Z', 'Choose Barttorvik Adjusted Efficiency',column_names,column_names[10]),
selectInput('Splitby', 'Split By', column_names,column_names[3])
),
column(4,plotOutput('plotMarchMadness')),
column(6,DT::dataTableOutput("table_01", width = "100%"))
)
)
server<-function(input,output){
output$plotMarchMadness <- renderPlot({
ggplot(data_df, aes_string(x=input$X, y= input$Y, z= input$Z))+
geom_point()+
geom_smooth()
})
output$table_01<-DT::renderDataTable(data_df[,c(input$X,input$Y,input$Z, input$Splitby)],options = list(pageLength = 4))
}
shinyApp(ui=ui, server=server)
#Import libraries
library(shiny)
library(ggplot2)
library(tidyverse)
library(rsconnect)
rm(list = ls())
#Read data
data_df <- read.csv("2023_game_data.csv")
#Import libraries
library(shiny)
library(ggplot2)
library(tidyverse)
library(rsconnect)
rm(list = ls())
#Read data
data_df <- read.csv("2023_game_data.csv")
column_names<-colnames(data_df) #for input selections
ui <- fluidPage(
#---- App title ----
titlePanel(title = "March Madness 2023 Dataset"),
fluidRow(
column(2,
selectInput('X', 'Choose Seed',column_names,column_names[2]),
selectInput('Y', 'Choose Kenpom Adjusted Efficiency',column_names,column_names[6]),
selectInput('Z', 'Choose Barttorvik Adjusted Efficiency',column_names,column_names[10]),
selectInput('Splitby', 'Split By', column_names,column_names[3])
),
column(4,plotOutput('plotMarchMadness')),
column(6,DT::dataTableOutput("table_01", width = "100%"))
)
)
server<-function(input,output){
output$plotMarchMadness <- renderPlot({
ggplot(data_df, aes_string(x=input$X, y= input$Y, z= input$Z))+
geom_point()+
geom_smooth()
})
output$table_01<-DT::renderDataTable(data_df[,c(input$X,input$Y,input$Z, input$Splitby)],options = list(pageLength = 4))
}
shinyApp(ui=ui, server=server)
#Import libraries
library(shiny)
library(ggplot2)
#Import libraries
library(shiny)
library(ggplot2)
library(tidyverse)
library(rsconnect)
rm(list = ls())
#Read data
data_df <- read.csv("2023_game_data.csv")
#Import libraries
library(shiny)
library(ggplot2)
library(tidyverse)
library(rsconnect)
rm(list = ls())
#Read data
data_df <- read.csv("2023_game_data.csv")
#Import libraries
library(shiny)
library(ggplot2)
library(tidyverse)
library(rsconnect)
rm(list = ls())
#Read data
data_df <- read.csv("2023_game_data.csv")
server<-function(input,output){
output$plotMarchMadness <- renderPlot({
ggplot(data_df, aes_string(x=input$X, y= input$Y, z= input$Z))+
geom_point()+
geom_smooth()
})
output$table_01<-DT::renderDataTable(data_df[,c(input$X,input$Y,input$Z, input$Splitby)],options = list(pageLength = 4))
}
shinyApp(ui=ui, server=server)
#Import libraries
library(shiny)
library(ggplot2)
library(tidyverse)
library(rsconnect)
rm(list = ls())
#Read data
data_df <- read.csv("2023_game_data.csv")
#Import libraries
library(shiny)
library(ggplot2)
library(tidyverse)
library(rsconnect)
rm(list = ls())
#Read data
data_df <- read.csv("2023_game_data.csv")
#Import libraries
library(shiny)
library(ggplot2)
library(tidyverse)
library(rsconnect)
rm(list = ls())
#Read data
data_df <- read.csv("2023_game_data.csv")
column_names<-colnames(data_df) #for input selections
#Import libraries
library(shiny)
library(ggplot2)
library(tidyverse)
library(rsconnect)
# #Read data
data_df <- read.csv("2023_game_data.csv")
#Import libraries
library(shiny)
library(ggplot2)
library(tidyverse)
library(rsconnect)
# #Read data
data_df <- read.csv("2023_game_data.csv")
column_names<-colnames(data_df) #for input selections
setwd("~/")
setwd("~/Desktop/Shinny")
runApp('~/Desktop/DATA/Data 332/Project 2/Shinny2.R')
setwd("~/Desktop/Shinny")
library(shiny)
library(ggplot2)
library(DT)
library(tidyverse)
library(rsconnect)
library(shiny)
library(ggplot2)
library(DT)
library(tidyverse)
library(rsconnect)
#Read data
df_base_day <- read.csv("Trip By Base and Day.csv")
df_base_month <- read.csv("Trip By Base and Month.csv")
df_day_hour <- read.csv("Trip By Day and Hour.csv")
df_dayofweek_month <- read.csv("Trip by DayofWeek And Month.csv")
df_hour_month <- read.csv("Trip By Hour And Month.csv")
df_month_day <- read.csv("Trip By Month and Day.csv")
df_month <- read.csv("Trip By Month.csv")
df_hour <- read.csv("Trip Per Hour.csv")
# UI
ui <- fluidPage(
titlePanel("Uber Trip Data"),
sidebarLayout(
sidebarPanel(
selectInput("data_select", "Select Data", choices = c("df_base_day", "df_base_month", "df_day_hour", "df_dayofweek_month", "df_hour_month", "df_month_day", "df_month", "df_hour"), selected = "df_base_day")
),
mainPanel(
plotOutput("bar_chart"),
DT::dataTableOutput("table")
)
)
)
# Server
server <- function(input, output) {
# Reactive data based on selected data
selected_data <- reactive({
switch(input$data_select,
"df_base_day" = df_base_day,
"df_base_month" = df_base_month,
"df_day_hour" = df_day_hour,
"df_dayofweek_month" = df_dayofweek_month,
"df_hour_month" = df_hour_month,
"df_month_day" = df_month_day,
"df_month" = df_month,
"df_hour" = df_hour)
})
# Render bar chart
output$bar_chart <- renderPlot({
if (input$data_select == "df_base_day") {
ggplot(selected_data(), aes(x = dayofweek, y = Total, fill = Base)) +
geom_bar(stat = "identity") +
labs(title = "Interactive Bar Chart", x = "Day of Week", y = "Total") +
theme_minimal()
}
else if (input$data_select == "df_base_month") {
ggplot(selected_data(), aes(x = Month, y = Total, fill = Base)) +
geom_bar(stat = "identity") +
labs(title = "Interactive Bar Chart", x = "Month", y = "Total") +
theme_minimal()
}
else if (input$data_select == "df_day_hour") {
ggplot(selected_data(), aes(x = Hour, y = Total, fill = Day)) +
geom_bar(stat = "identity") +
labs(title = "Interactive Bar Chart", x = "Hour", y = "Total") +
theme_minimal()
}
else if (input$data_select == "df_dayofweek_month") {
ggplot(selected_data(), aes(x = dayofweek, y = Total, fill = Month)) +
geom_bar(stat = "identity") +
labs(title = "Interactive Bar Chart", x = "dayofweek", y = "Total") +
theme_minimal()
}
else if (input$data_select == "df_hour_month") {
ggplot(selected_data(), aes(x = Hour, y = Total, fill = Month)) +
geom_bar(stat = "identity") +
labs(title = "Interactive Bar Chart", x = "Hour", y = "Total") +
theme_minimal()
}
else if (input$data_select == "df_month_day") {
ggplot(selected_data(), aes(x = Month, y = Total, fill = Day)) +
geom_bar(stat = "identity") +
labs(title = "Interactive Bar Chart", x = "Month", y = "Total") +
theme_minimal()
}
else if (input$data_select == "df_month") {
ggplot(selected_data(), aes(x = Month, y = Total)) +
geom_bar(stat = "identity", fill= "red") +
labs(title = "Interactive Bar Chart", x = "Month", y = "Total") +
theme_minimal()
}
else if (input$data_select == "df_hour") {
ggplot(selected_data(), aes(x = Hour, y = Total)) +
geom_bar(stat = "identity", fill="forestgreen") +
labs(title = "Interactive Bar Chart", x = "Hour", y = "Total") +
theme_minimal()
}
})
# Render data table
output$table <- DT::renderDataTable({
DT::datatable(selected_data(), options = list(pageLength = 10))
})
}
# Run the Shiny app
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(DT)
library(tidyverse)
library(rsconnect)
#Read data
df_base_day <- read.csv("Trip By Base and Day.csv")
df_base_month <- read.csv("Trip By Base and Month.csv")
df_day_hour <- read.csv("Trip By Day and Hour.csv")
df_dayofweek_month <- read.csv("Trip by DayofWeek And Month.csv")
df_hour_month <- read.csv("Trip By Hour And Month.csv")
df_month_day <- read.csv("Trip By Month and Day.csv")
df_month <- read.csv("Trip By Month.csv")
df_hour <- read.csv("Trip Per Hour.csv")
# UI
ui <- fluidPage(
titlePanel("Uber Trip Data"),
sidebarLayout(
sidebarPanel(
selectInput("data_select", "Select Data", choices = c("df_base_day", "df_base_month", "df_day_hour", "df_dayofweek_month", "df_hour_month", "df_month_day", "df_month", "df_hour"), selected = "df_base_day")
),
mainPanel(
plotOutput("bar_chart"),
DT::dataTableOutput("table")
)
)
)
setwd("~/Desktop/Shinny")
setwd("~/Desktop/Shinny")
getwd()
setwd("/Users/stutishrestha/Desktop/Shinny")
getwd()
getwd()
setwd("/Users/stutishrestha/Desktop/Shinny/")
getwd()
#Read data
df_base_day <- read.csv("Trip By Base and Day.csv")
getwd()
getwd()
setwd("~/Desktop/DATA/Data 332/UberProject/Files for Shinny ")
getwd()
getwd()
getwd()
library(shiny)
library(ggplot2)
library(DT)
library(tidyverse)
library(rsconnect)
#Read data
df_base_day <- read.csv("Trip By Base and Day.csv")
df_base_month <- read.csv("Trip By Base and Month.csv")
df_day_hour <- read.csv("Trip By Day and Hour.csv")
df_dayofweek_month <- read.csv("Trip by DayofWeek And Month.csv")
df_hour_month <- read.csv("Trip By Hour and Month.csv")
df_month_day <- read.csv("Trip By Month and Day.csv")
df_month <- read.csv("Trip By Month.csv")
df_hour <- read.csv("Trip Per Hour.csv")
